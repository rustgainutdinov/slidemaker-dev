[{"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\index.tsx":"1","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\App.tsx":"2","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\store\\Reducer\\index.ts":"3","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\index.tsx":"4","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\store\\Reducer\\editor\\index.ts":"5","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\contents\\index.tsx":"6","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\typeGuardMethods\\isCircle.ts":"7","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\typeGuardMethods\\isTextContainer.ts":"8","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\typeGuardMethods\\isRectangle.ts":"9","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\getDefaultEditor.ts":"10","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\createSlide.ts":"11","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\contents\\circle.tsx":"12","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\contents\\textContainers.tsx":"13","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\changeCurrentSlide.ts":"14","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updateRectangle.ts":"15","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\changeCurrentContent.ts":"16","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updateTextContainer.ts":"17","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updateCircle.ts":"18","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\contents\\rectangles.tsx":"19","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\getParamsOfContent\\getDefaultPresentation.ts":"20","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\getParamsOfContent\\getDefaultSlide.ts":"21","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\getParamsOfContent\\getDefaultTextContainer.ts":"22","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\createCircle.ts":"23","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\createRectangle.ts":"24","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\createTextContainer.ts":"25","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updateContent.ts":"26","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\core\\updateEditorContent.ts":"27","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\core\\generateUuid.ts":"28","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\getParamsOfContent\\getDefaultCircle.ts":"29","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\getParamsOfContent\\getDefaultRectangle.ts":"30","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\core\\updateSlidesListContent.ts":"31","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\const\\BorderType.ts":"32","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\core\\getIteratedCurrSlideContentList.ts":"33","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\contents\\image.tsx":"34","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\typeGuardMethods\\isImage.ts":"35","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\createImage.ts":"36","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\getParamsOfContent\\getDefaultImage.ts":"37","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updateImage.ts":"38","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\workingSpace.tsx":"39","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\index.tsx":"40","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\previews\\previews.tsx":"41","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\logo.tsx":"42","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\toolsPanel.tsx":"43","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\previews\\previewSlidesList.tsx":"44","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\previews\\addSlide.tsx":"45","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\previews\\previewSlide.tsx":"46","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updateSlideBackground.ts":"47","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\textTools\\textTools.tsx":"48","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\shapeTools\\shapeTools.tsx":"49","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\typeGuardMethods\\isShape.ts":"50","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\textTools\\textFontFamilyControl.tsx":"51","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\shapeTools\\updateShapeBg.tsx":"52","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\textTools\\textSizeControl.tsx":"53","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\textTools\\textColor.tsx":"54","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\shapeTools\\updateShapeBorder.tsx":"55","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\textTools\\textStyleControl.tsx":"56","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\updateControlElements.tsx":"57","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\index.tsx":"58","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\updateImage.tsx":"59","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\updateRectangle.tsx":"60","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\updateTextContainer.tsx":"61","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\updateCircle.tsx":"62","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\createCircle.tsx":"63","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\createRectangle.tsx":"64","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\createImage.tsx":"65","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\createTextContainer.tsx":"66","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updatePresentationName.ts":"67","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\presentationName.tsx":"68","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\slideBackground.tsx":"69","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\deletingControl.tsx":"70","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\deleteElement.tsx":"71","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\core\\deleteEditorContent.ts":"72","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\core\\deleteFromSlideList.ts":"73","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updateSlideBackgroundImage.ts":"74","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\control\\draggable\\draggable.tsx":"75"},{"size":150,"mtime":1609786855626,"results":"76","hashOfConfig":"77"},{"size":522,"mtime":1609971374676,"results":"78","hashOfConfig":"77"},{"size":208,"mtime":1609786855707,"results":"79","hashOfConfig":"77"},{"size":252,"mtime":1609971374690,"results":"80","hashOfConfig":"77"},{"size":2181,"mtime":1609964871988,"results":"81","hashOfConfig":"77"},{"size":2849,"mtime":1610231362959,"results":"82","hashOfConfig":"77"},{"size":222,"mtime":1609786855648,"results":"83","hashOfConfig":"77"},{"size":252,"mtime":1609786855651,"results":"84","hashOfConfig":"77"},{"size":238,"mtime":1609786855650,"results":"85","hashOfConfig":"77"},{"size":374,"mtime":1609964871955,"results":"86","hashOfConfig":"77"},{"size":837,"mtime":1609964871951,"results":"87","hashOfConfig":"77"},{"size":1307,"mtime":1610231177880,"results":"88","hashOfConfig":"77"},{"size":1048,"mtime":1610231498149,"results":"89","hashOfConfig":"77"},{"size":294,"mtime":1609964871971,"results":"90","hashOfConfig":"77"},{"size":484,"mtime":1610231178381,"results":"91","hashOfConfig":"77"},{"size":464,"mtime":1609964871969,"results":"92","hashOfConfig":"77"},{"size":512,"mtime":1610231178390,"results":"93","hashOfConfig":"77"},{"size":465,"mtime":1610231178372,"results":"94","hashOfConfig":"77"},{"size":1426,"mtime":1610231440490,"results":"95","hashOfConfig":"77"},{"size":286,"mtime":1609964871959,"results":"96","hashOfConfig":"77"},{"size":301,"mtime":1610231178298,"results":"97","hashOfConfig":"77"},{"size":593,"mtime":1610231784322,"results":"98","hashOfConfig":"77"},{"size":447,"mtime":1609964871945,"results":"99","hashOfConfig":"77"},{"size":462,"mtime":1609964871949,"results":"100","hashOfConfig":"77"},{"size":483,"mtime":1609964871953,"results":"101","hashOfConfig":"77"},{"size":624,"mtime":1609964871975,"results":"102","hashOfConfig":"77"},{"size":633,"mtime":1609964871966,"results":"103","hashOfConfig":"77"},{"size":261,"mtime":1609964871965,"results":"104","hashOfConfig":"77"},{"size":569,"mtime":1610231178053,"results":"105","hashOfConfig":"77"},{"size":649,"mtime":1610231178118,"results":"106","hashOfConfig":"77"},{"size":661,"mtime":1610231178367,"results":"107","hashOfConfig":"77"},{"size":66,"mtime":1609786855623,"results":"108","hashOfConfig":"77"},{"size":462,"mtime":1609966492422,"results":"109","hashOfConfig":"77"},{"size":398,"mtime":1609967352319,"results":"110","hashOfConfig":"77"},{"size":212,"mtime":1609966371431,"results":"111","hashOfConfig":"77"},{"size":445,"mtime":1609965953409,"results":"112","hashOfConfig":"77"},{"size":455,"mtime":1610231178115,"results":"113","hashOfConfig":"77"},{"size":458,"mtime":1610231178376,"results":"114","hashOfConfig":"77"},{"size":354,"mtime":1610230723712,"results":"115","hashOfConfig":"77"},{"size":255,"mtime":1609971374692,"results":"116","hashOfConfig":"77"},{"size":667,"mtime":1610230723557,"results":"117","hashOfConfig":"77"},{"size":166,"mtime":1610230819885,"results":"118","hashOfConfig":"77"},{"size":1223,"mtime":1610231744519,"results":"119","hashOfConfig":"77"},{"size":927,"mtime":1610231770391,"results":"120","hashOfConfig":"77"},{"size":574,"mtime":1610230723505,"results":"121","hashOfConfig":"77"},{"size":540,"mtime":1610230723508,"results":"122","hashOfConfig":"77"},{"size":381,"mtime":1610231178383,"results":"123","hashOfConfig":"77"},{"size":1500,"mtime":1610230723710,"results":"124","hashOfConfig":"77"},{"size":1232,"mtime":1610230723560,"results":"125","hashOfConfig":"77"},{"size":217,"mtime":1610230723738,"results":"126","hashOfConfig":"77"},{"size":1467,"mtime":1610230723706,"results":"127","hashOfConfig":"77"},{"size":2100,"mtime":1610231062532,"results":"128","hashOfConfig":"77"},{"size":2217,"mtime":1610230723708,"results":"129","hashOfConfig":"77"},{"size":1439,"mtime":1610230723705,"results":"130","hashOfConfig":"77"},{"size":3862,"mtime":1610230723702,"results":"131","hashOfConfig":"77"},{"size":3917,"mtime":1610230723709,"results":"132","hashOfConfig":"77"},{"size":1931,"mtime":1610231537490,"results":"133","hashOfConfig":"77"},{"size":1121,"mtime":1610231179735,"results":"134","hashOfConfig":"77"},{"size":3351,"mtime":1610231179721,"results":"135","hashOfConfig":"77"},{"size":5208,"mtime":1610231179719,"results":"136","hashOfConfig":"77"},{"size":5936,"mtime":1610231179716,"results":"137","hashOfConfig":"77"},{"size":4389,"mtime":1610231179734,"results":"138","hashOfConfig":"77"},{"size":765,"mtime":1610231179776,"results":"139","hashOfConfig":"77"},{"size":786,"mtime":1610231179753,"results":"140","hashOfConfig":"77"},{"size":738,"mtime":1610231179761,"results":"141","hashOfConfig":"77"},{"size":807,"mtime":1610231179744,"results":"142","hashOfConfig":"77"},{"size":308,"mtime":1610231178379,"results":"143","hashOfConfig":"77"},{"size":903,"mtime":1610231178045,"results":"144","hashOfConfig":"77"},{"size":2020,"mtime":1610231178047,"results":"145","hashOfConfig":"77"},{"size":502,"mtime":1610231178029,"results":"146","hashOfConfig":"77"},{"size":862,"mtime":1610231178027,"results":"147","hashOfConfig":"77"},{"size":575,"mtime":1610231178346,"results":"148","hashOfConfig":"77"},{"size":466,"mtime":1610231178353,"results":"149","hashOfConfig":"77"},{"size":384,"mtime":1610231178386,"results":"150","hashOfConfig":"77"},{"size":1519,"mtime":1610231177888,"results":"151","hashOfConfig":"77"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},"wq0m6n",{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"154"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"154"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"154"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"154"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"154"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"262","messages":"263","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"154"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"154"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"154"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"154"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"154"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"154"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"154"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"154"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"154"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\index.tsx",[],["317","318"],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\App.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\store\\Reducer\\index.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\index.tsx",["319","320","321","322"],"import React from \"react\";\r\nimport {Contents} from \"./contents\";\r\nimport {Control} from \"./control\";\r\nimport {UpdateControlElements} from \"./control/updateControlElements\";\r\nimport {Previews} from \"./previews\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {redoState, undoState} from \"../../store/Reducer/editor\";\r\n\r\nexport const Editor = () => {\r\n    const dispatch = useDispatch();\r\n    const undoAction = () => dispatch(undoState());\r\n    const redoAction = () => dispatch(redoState());\r\n    return (\r\n        <section>\r\n            <section>\r\n                <div className=\"main_menu\">\r\n                    <div className=\"logo_box\">\r\n                        <p className=\"logo\">Y</p>\r\n                    </div>\r\n                    <div className=\"tools_panel\">\r\n                        <h1 className=\"title\">Самая лучшая презентация</h1>\r\n                        <div className=\"tools\">\r\n                            <li><a href=\"#\" className=\"tools_button\">Файл</a></li>\r\n                            <li><a href=\"#\" className=\"tools_button\" onClick={undoAction}>UNDO</a></li>\r\n                            <li><a href=\"#\" className=\"tools_button\" onClick={redoAction}>REDO</a></li>\r\n                            <li><a href=\"#\" className=\"tools_button\">Вставка</a>\r\n                                <ul className=\"dropdown\">\r\n                                    <Control/>\r\n                                </ul>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"#edit_params\" className=\"tools_button\">Изменить</a>\r\n                                <UpdateControlElements/>\r\n                            </li>\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"edit_panel\">\r\n                            <h2 className=\"edit_title\">Параметры элементов</h2>\r\n                            <div className=\"edit_tools_box\">\r\n                                <div className=\"edit_tools\">\r\n                                    <li>\r\n                                        <a href=\"#edit_params\" className=\"edit_button\">Редактировать элемент</a>\r\n                                        <UpdateControlElements/>\r\n                                    </li>\r\n                                     <li>\r\n                                        <a href=\"#edit_params_box_color\" className=\"edit_button\">Цвет</a>\r\n                                        <div id=\"edit_params_box_color\">\r\n                                            <div id=\"popup_color\">\r\n                                                <div className=\"params_field\">\r\n                                                    <h3 className=\"param_name\">Изменить цвет</h3>\r\n                                                    <input type=\"text\" className=\"param_input_label\"/>\r\n                                                </div>\r\n                                                <a href=\"#\" className=\"close\">Применить</a>\r\n                                            </div>\r\n                                        </div>\r\n                                    </li> \r\n                                </div>\r\n                            </div>\r\n                        </div> */}\r\n                </div>\r\n            </section>\r\n            <section>\r\n                <div className=\"working_space\">\r\n                    <Previews/>\r\n                    <div className=\"slide_view\">\r\n                        <Contents/>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </section>\r\n    );\r\n};\r\n","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\store\\Reducer\\editor\\index.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\contents\\index.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\typeGuardMethods\\isCircle.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\typeGuardMethods\\isTextContainer.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\typeGuardMethods\\isRectangle.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\getDefaultEditor.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\createSlide.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\contents\\circle.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\contents\\textContainers.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\changeCurrentSlide.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updateRectangle.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\changeCurrentContent.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updateTextContainer.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updateCircle.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\contents\\rectangles.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\getParamsOfContent\\getDefaultPresentation.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\getParamsOfContent\\getDefaultSlide.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\getParamsOfContent\\getDefaultTextContainer.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\createCircle.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\createRectangle.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\createTextContainer.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updateContent.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\core\\updateEditorContent.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\core\\generateUuid.ts",["323","324"],"function generateUuid() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\n\r\nexport default generateUuid","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\getParamsOfContent\\getDefaultCircle.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\getParamsOfContent\\getDefaultRectangle.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\core\\updateSlidesListContent.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\const\\BorderType.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\core\\getIteratedCurrSlideContentList.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\contents\\image.tsx",["325"],"import Image from \"../../../model/slide/content/Image\";\r\n\r\ntype ImageProps = {\r\n    image: Image,\r\n    onClick: () => void,\r\n    isCurrent: boolean\r\n}\r\n\r\nexport const Image = ({image, onClick}: ImageProps) => {\r\n    return (\r\n        <image x={image.position.x} y={image.position.y} width={image.size.width} height={image.size.height}\r\n            href={url} onClick={onClick}/>\r\n    );\r\n};","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\typeGuardMethods\\isImage.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\createImage.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\addContent\\getParamsOfContent\\getDefaultImage.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updateImage.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\workingSpace.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\index.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\previews\\previews.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\logo.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\toolsPanel.tsx",["326","327","328"],"<<<<<<< HEAD\r\nimport { ControlEl } from \"../control\";\r\nimport { UpdateControlElements } from \"../control/updateControlElements\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { redoState, undoState } from \"../../../store/Reducer/editor\";\r\nimport { TextTools } from \"../textTools/textTools\";\r\nimport './toolsPanel.css'\r\nimport { ShapeTools } from \"../shapeTools/shapeTools\";\r\n=======\r\nimport {Control} from \"./control\";\r\nimport {UpdateControlElements} from \"./control/updateControlElements\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { redoState, undoState } from \"../../../store/Reducer/editor\";\r\nimport { DeletingControl } from \"./control/deletingControl\";\r\nimport { PresentationEl } from \"./presentationName\";\r\nimport { SlideBackgroundEl } from \"./slideBackground\";\r\n>>>>>>> master\r\n\r\nexport const ToolsPanel = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"tools_panel\">\r\n            <h1 className=\"title\"><PresentationEl /></h1>\r\n            <div className=\"tools\">\r\n<<<<<<< HEAD\r\n                <div className=\"main_tools\">\r\n                    <li><a href=\"#\" className=\"tools_button\">Файл</a></li>\r\n                    <li><a href=\"#\" className=\"tools_button\" onClick={() => dispatch(undoState())}>UNDO</a></li>\r\n                    <li><a href=\"#\" className=\"tools_button\" onClick={() => dispatch(redoState())}>REDO</a></li>\r\n                    <UpdateControlElements />\r\n                    <ControlEl />\r\n                </div>\r\n                <ShapeTools />\r\n                <TextTools />\r\n=======\r\n                <li><a href=\"#\" className=\"tools_button\">Файл</a></li>\r\n                <li><a href=\"#\" className=\"tools_button\" onClick={() => dispatch(undoState())}>UNDO</a></li>\r\n                <li><a href=\"#\" className=\"tools_button\" onClick={() => dispatch(redoState())}>REDO</a></li>\r\n                <li><a href=\"#\" className=\"tools_button\">Вставка</a>\r\n                    <ul className=\"dropdown\">\r\n                        <Control />\r\n                    </ul>\r\n                </li>\r\n                <li><DeletingControl /></li>\r\n                <li><a href=\"#\" className=\"tools_button\">Фон</a>\r\n                    <ul className=\"dropdown\">\r\n                        <SlideBackgroundEl />\r\n                    </ul>\r\n                </li>\r\n                <li>\r\n                    <a href=\"#edit_params\" className=\"tools_button\">Изменить</a>\r\n                    <UpdateControlElements />\r\n                </li>\r\n>>>>>>> master\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\previews\\previewSlidesList.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\previews\\addSlide.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\previews\\previewSlide.tsx",["329","330"],"import {Slide} from \"../../../model/slide/Slide\";\r\nimport './previews.css'\r\n\r\ntype PreviewSlideProps = {\r\n    slide: Slide,\r\n    onClick: () => void\r\n}\r\n\r\nexport const PreviewSlide = ({slide, onClick}: PreviewSlideProps) => {\r\n    return (\r\n        <div className=\"slide_wrapper\" onClick={onClick}\r\n             key={slide.slideId}>\r\n            <div className=\"slide_counter\">\r\n                <p className=\"counter\">{slide.slideId + 1}</p>\r\n            </div>\r\n            <a href=\"#\" className=\"slide_box\"></a>\r\n        </div>\r\n    )\r\n};","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updateSlideBackground.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\textTools\\textTools.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\shapeTools\\shapeTools.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\typeGuardMethods\\isShape.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\textTools\\textFontFamilyControl.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\shapeTools\\updateShapeBg.tsx",["331"],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\textTools\\textSizeControl.tsx",["332","333","334"],"import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport updateTextContainer from \"../../../methods/updateContent/updateTextContainer\";\r\nimport Editor from \"../../../model/Editor\";\r\nimport TextContainer from \"../../../model/slide/content/TextContainer\";\r\nimport { addState } from \"../../../store/Reducer/editor\";\r\nimport './text.css';\r\n\r\ntype updateTextContainerProps = {\r\n    presentEditor: Editor, currentTextContainer: TextContainer\r\n}\r\n\r\nexport const TextSize = ({ presentEditor, currentTextContainer }: updateTextContainerProps) => {\r\n    const dispatch = useDispatch();\r\n    const updateStateUpdatingTextContainer = (textContainer: TextContainer) => dispatch(addState(updateTextContainer(presentEditor, textContainer)));\r\n\r\n    const [fontSize, setFontSize] = useState(16);\r\n\r\n    const handleRichTextFontSizeChange = (event: any) => {\r\n        updateStateUpdatingTextContainer({\r\n            ...currentTextContainer,\r\n            richText: {\r\n                ...currentTextContainer.richText,\r\n                fontSize: +event.target.value\r\n            }\r\n        });\r\n        setFontSize(+event.target.value);\r\n    }\r\n\r\n    const handleFontSizeInc = () => {\r\n        setFontSize(fontSize + 1);\r\n        updateStateUpdatingTextContainer({\r\n            ...currentTextContainer,\r\n            richText: {\r\n                ...currentTextContainer.richText,\r\n                fontSize: fontSize\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleFontSizeDec = () => {\r\n        if (fontSize != 1) {\r\n            setFontSize(fontSize - 1);\r\n        }\r\n        updateStateUpdatingTextContainer({\r\n            ...currentTextContainer,\r\n            richText: {\r\n                ...currentTextContainer.richText,\r\n                fontSize: fontSize\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"edit_text_size\">\r\n            <li><a href=\"#\" className=\"tools_button resize\" onClick={handleFontSizeDec}>-</a></li>\r\n            <input type=\"text\" className=\"input_resize_box\" value={fontSize} onInput={handleRichTextFontSizeChange} />\r\n            <li><a href=\"#\" className=\"tools_button resize\" onClick={handleFontSizeInc} >+</a></li>\r\n        </div>\r\n    )\r\n\r\n}","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\textTools\\textColor.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\shapeTools\\updateShapeBorder.tsx",["335","336"],"import { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateContent } from \"../../../methods/updateContent/updateContent\";\r\nimport Editor from \"../../../model/Editor\";\r\nimport Shape from \"../../../model/slide/content/Shape\";\r\nimport { addState } from \"../../../store/Reducer/editor\";\r\n\r\ntype updateProps = {\r\n    presentEditor: Editor, currentContent: Shape\r\n}\r\n\r\nexport const ShapeBorder = ({ presentEditor, currentContent }: updateProps) => {\r\n    const dispatch = useDispatch();\r\n    const updateStateUpdatingContentBackGround = (content: Shape) => dispatch(addState(updateContent(presentEditor, content)));\r\n    const selectRef = useRef<HTMLInputElement>(null);\r\n    const [borderWidthClass, setClass] = useState('');\r\n    const [borderWidthSelectClass, setSelectClass] = useState('');\r\n\r\n    const SelectFocus = () => {\r\n        setClass('borderWidth')\r\n        setSelectClass('borderWidtSelect_active')\r\n    }\r\n\r\n    const SelectUnfocus = () => {\r\n        setClass('')\r\n        setSelectClass('')\r\n    }\r\n\r\n    const handleFocus = () => {\r\n        if (selectRef.current != null) {\r\n            selectRef.current.click();\r\n        }\r\n    }\r\n\r\n    const handleBorderColorChange = (event: any) => updateStateUpdatingContentBackGround({\r\n        ...currentContent,\r\n        border: {\r\n            ...currentContent.border,\r\n            color: event.target.value\r\n        }\r\n    });\r\n\r\n    const handleBorderWidthChange = (event: any) => updateStateUpdatingContentBackGround({\r\n        ...currentContent,\r\n        border: {\r\n            ...currentContent.border,\r\n            width: event.target.value\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <li onClick={handleFocus}>\r\n                <a href=\"#\" className=\"shape\">\r\n                    <svg id=\"mdi-border-color\" className=\"shape_button\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"#ffffff\"><path d=\"M20.71,4.04C21.1,3.65 21.1,3 20.71,2.63L18.37,0.29C18,-0.1 17.35,-0.1 16.96,0.29L15,2.25L18.75,6M17.75,7L14,3.25L4,13.25V17H7.75L17.75,7Z\" /></svg>\r\n                    <div className=\"dropDown\">\r\n                        <input className=\"hidden\" ref={selectRef} type=\"color\" onInput={handleBorderColorChange} list=\"colorList\" />\r\n                        <datalist id=\"colorList\">\r\n                            <option value=\"#ff0000\" label=\"Красный\" />\r\n                            <option value=\"#008000\" label=\"Зелёный\" />\r\n                            <option value=\"#0000ff\" label=\"Синий\" />\r\n                        </datalist>\r\n                    </div>\r\n                </a>\r\n            </li>\r\n            <li onMouseMove={SelectFocus} onMouseOut={SelectUnfocus}>\r\n                <a href=\"#\" className={\"shape \" + borderWidthClass}>\r\n                    <svg width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\" fill=\"#ffffff\"><path d=\"M0 3.5A.5.5 0 0 1 .5 3h15a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5H.5a.5.5 0 0 1-.5-.5v-2zm0 5A.5.5 0 0 1 .5 8h15a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H.5a.5.5 0 0 1-.5-.5v-1zm0 4a.5.5 0 0 1 .5-.5h15a.5.5 0 0 1 0 1H.5a.5.5 0 0 1-.5-.5z\" /></svg>\r\n                </a>\r\n                <select className={\"borderWidtSelect \" + borderWidthSelectClass} onInput={handleBorderWidthChange} onMouseMove={SelectFocus} onMouseOut={SelectUnfocus}>\r\n                    <option value='1'>1 пикс.</option>\r\n                    <option value='2'>2 пикс.</option>\r\n                    <option value='3'>3 пикс.</option>\r\n                    <option value='4'>4 пикс.</option>\r\n                    <option value='8'>8 пикс.</option>\r\n                    <option value='12'>12 пикс.</option>\r\n                    <option value='16'>16 пикс.</option>\r\n                    <option value='24'>24 пикс.</option>\r\n                </select>\r\n            </li>\r\n        </>\r\n\r\n    )\r\n}","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\textTools\\textStyleControl.tsx",["337","338","339","340","341","342"],"import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport updateTextContainer from \"../../../methods/updateContent/updateTextContainer\";\r\nimport Editor from \"../../../model/Editor\";\r\nimport TextContainer from \"../../../model/slide/content/TextContainer\";\r\nimport { addState } from \"../../../store/Reducer/editor\";\r\nimport './text.css';\r\n\r\ntype updateTextContainerProps = {\r\n    presentEditor: Editor, currentTextContainer: TextContainer\r\n}\r\n\r\nexport const TextStyle = ({ presentEditor, currentTextContainer }: updateTextContainerProps) => {\r\n    const dispatch = useDispatch();\r\n    const updateStateUpdatingTextContainer = (textContainer: TextContainer) => dispatch(addState(updateTextContainer(presentEditor, textContainer)));\r\n\r\n    const [activeClasNameForBold, setClassNameForBold] = useState('')\r\n    const [isBold, setBold] = useState(false);\r\n    const [activeClasNameForItalic, setClassNameForItalic] = useState('')\r\n    const [isItalic, setItalic] = useState(false);\r\n    const [activeClasNameForTextDecoration, setClassNameForTextDecoration] = useState('')\r\n    const [isUnderLine, setUnderLine] = useState(false);\r\n\r\n    const handleBold = () => {\r\n        if (isBold == true) {\r\n            setBold(false);\r\n            updateStateUpdatingTextContainer({\r\n                ...currentTextContainer,\r\n                richText: {\r\n                    ...currentTextContainer.richText,\r\n                    fontWeight: 400\r\n                }\r\n            });\r\n            setClassNameForBold(\"\");\r\n        } else {\r\n            setBold(true);\r\n            updateStateUpdatingTextContainer({\r\n                ...currentTextContainer,\r\n                richText: {\r\n                    ...currentTextContainer.richText,\r\n                    fontWeight: 600\r\n                }\r\n            });\r\n            setClassNameForBold(\"active_tools_button\");\r\n        }\r\n    }\r\n\r\n    const handleItalic = () => {\r\n        if (isItalic == true) {\r\n            setItalic(false);\r\n            updateStateUpdatingTextContainer({\r\n                ...currentTextContainer,\r\n                richText: {\r\n                    ...currentTextContainer.richText,\r\n                    fontStyle: 'normal'\r\n                }\r\n            });\r\n            setClassNameForItalic(\"\");\r\n        } else {\r\n            setItalic(true);\r\n            updateStateUpdatingTextContainer({\r\n                ...currentTextContainer,\r\n                richText: {\r\n                    ...currentTextContainer.richText,\r\n                    fontStyle: 'italic'\r\n                }\r\n            });\r\n            setClassNameForItalic(\"active_tools_button\");\r\n        }\r\n    }\r\n\r\n    const handleTextDecorration = () => {\r\n        if (isUnderLine == true) {\r\n            setUnderLine(false);\r\n            updateStateUpdatingTextContainer({\r\n                ...currentTextContainer,\r\n                richText: {\r\n                    ...currentTextContainer.richText,\r\n                    textDecoration: 'none'\r\n                }\r\n            });\r\n            setClassNameForTextDecoration(\"\");\r\n        } else {\r\n            setUnderLine(true);\r\n            updateStateUpdatingTextContainer({\r\n                ...currentTextContainer,\r\n                richText: {\r\n                    ...currentTextContainer.richText,\r\n                    textDecoration: 'underline'\r\n                }\r\n            });\r\n            setClassNameForTextDecoration(\"active_tools_button\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <li><a href=\"#\" className={\"tools_button bold \" + activeClasNameForBold} onClick={handleBold}>B</a></li>\r\n            <li><a href=\"#\" className={\"tools_button italic \" + activeClasNameForItalic} onClick={handleItalic}>I</a></li>\r\n            <li><a href=\"#\" className={\"tools_button decoration \" + activeClasNameForTextDecoration} onClick={handleTextDecorration}>U</a></li>\r\n        </>\r\n    )\r\n}","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\updateControlElements.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\index.tsx",["343","344","345","346"],"import {Component} from \"react\";\r\nimport {CreateCircle} from './createCircle'\r\nimport {CreateRectangle} from './createRectangle'\r\nimport {CreateTextContainer} from './createTextContainer'\r\nimport {CreateImage} from './createImage'\r\n\r\nexport class Control extends Component {\r\n    render() {\r\n        return (\r\n            <ul className=\"dropdown\">\r\n                <li><a href=\"#\"><CreateRectangle/></a></li>\r\n                <li><a href=\"#\"><CreateCircle/></a></li>\r\n                <li><a href=\"#\"><CreateTextContainer/></a></li>\r\n                <li><a href=\"#\"><CreateImage/></a></li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\updateImage.tsx",["347"],"import { useDispatch } from \"react-redux\";\r\nimport Editor from \"../../../../model/Editor\";\r\nimport { addState } from \"../../../../store/Reducer/editor\";\r\nimport Image from \"../../../../model/slide/content/Image\";\r\nimport updateImage from \"../../../../methods/updateContent/updateImage\";\r\n\r\ntype updateImageProps = {\r\n    presentEditor: Editor, currentImage: Image\r\n}\r\n\r\nexport const UpdateImage = ({ presentEditor, currentImage }: updateImageProps) => {\r\n    const dispatch = useDispatch();\r\n    const updateStateUpdatingImage = (image: Image) => dispatch(addState(updateImage(presentEditor, image)));\r\n\r\n    const handlePositionXChange = (event: any) => updateStateUpdatingImage({\r\n        ...currentImage,\r\n        position: {\r\n            ...currentImage.position,\r\n            x: +event.target.value\r\n        }\r\n    });\r\n    const handlePositionYChange = (event: any) => updateStateUpdatingImage({\r\n        ...currentImage,\r\n        position: {\r\n            ...currentImage.position,\r\n            y: +event.target.value\r\n        }\r\n    });\r\n    const handleImageSizeHeightChange = (event: any) => updateStateUpdatingImage({\r\n        ...currentImage,\r\n        size: {\r\n            ...currentImage.size,\r\n            height: +event.target.value\r\n        }\r\n    });\r\n    const handleImageSizeWidthChange = (event: any) => updateStateUpdatingImage({\r\n        ...currentImage,\r\n        size: {\r\n            ...currentImage.size,\r\n            width: +event.target.value\r\n        }\r\n    });\r\n    const handleImageUrlChange = (event: any) => updateStateUpdatingImage({\r\n        ...currentImage,\r\n        url: event.target.value\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"edit_params\">\r\n                <div id=\"popup_rect\">\r\n                <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Ссылка</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleImageUrlChange} value={currentImage.url} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Ширина</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleImageSizeWidthChange} value={currentImage.size.width} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Высота</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleImageSizeHeightChange} value={currentImage.size.height} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Позиция X</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handlePositionXChange} value={currentImage.position.x} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Позиция Y</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handlePositionYChange} value={currentImage.position.y} />\r\n                    </div>\r\n                    <a href=\"#\" className=\"close\">Применить</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\updateRectangle.tsx",["348"],"import { useDispatch } from \"react-redux\";\r\nimport Editor from \"../../../../model/Editor\";\r\nimport { addState } from \"../../../../store/Reducer/editor\";\r\nimport Rectangle from \"../../../../model/slide/content/shape/Rectangle\";\r\nimport updateRectangle from \"../../../../methods/updateContent/updateRectangle\";\r\n\r\ntype updateRectangleProps = {\r\n    presentEditor: Editor, currentRectangle: Rectangle\r\n}\r\n\r\nexport const UpdateRectangle = ({ presentEditor, currentRectangle }: updateRectangleProps) => {\r\n    const dispatch = useDispatch();\r\n    const updateStateUpdatingRectangle = (rectangle: Rectangle) => dispatch(addState(updateRectangle(presentEditor, rectangle)));\r\n\r\n    const handleBackgroundChange = (event: any) => updateStateUpdatingRectangle({\r\n        ...currentRectangle,\r\n        background: event.target.value\r\n    });\r\n    const handleBorderWidthChange = (event: any) => updateStateUpdatingRectangle({\r\n        ...currentRectangle,\r\n        border: {\r\n            ...currentRectangle.border,\r\n            width: +event.target.value\r\n        }\r\n    });\r\n    const handleBorderColorChange = (event: any) => updateStateUpdatingRectangle({\r\n        ...currentRectangle,\r\n        border: {\r\n            ...currentRectangle.border,\r\n            color: event.target.value\r\n        }\r\n    });\r\n    const handleBorderTypeChange = (event: any) => updateStateUpdatingRectangle({\r\n        ...currentRectangle,\r\n        border: {\r\n            ...currentRectangle.border,\r\n            type: event.target.value\r\n        }\r\n    });\r\n    const handlePositionXChange = (event: any) => updateStateUpdatingRectangle({\r\n        ...currentRectangle,\r\n        position: {\r\n            ...currentRectangle.position,\r\n            x: +event.target.value\r\n        }\r\n    });\r\n    const handlePositionYChange = (event: any) => updateStateUpdatingRectangle({\r\n        ...currentRectangle,\r\n        position: {\r\n            ...currentRectangle.position,\r\n            y: +event.target.value\r\n        }\r\n    });\r\n    const handleRectangleSizeHeightChange = (event: any) => updateStateUpdatingRectangle({\r\n        ...currentRectangle,\r\n        rectangleSize: {\r\n            ...currentRectangle.rectangleSize,\r\n            height: +event.target.value\r\n        }\r\n    });\r\n    const handleRectangleSizeWidthChange = (event: any) => updateStateUpdatingRectangle({\r\n        ...currentRectangle,\r\n        rectangleSize: {\r\n            ...currentRectangle.rectangleSize,\r\n            width: +event.target.value\r\n        }\r\n    });\r\n    return (\r\n        <div>\r\n            <div id=\"edit_params\">\r\n                <div id=\"popup_rect\">\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Ширина</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleRectangleSizeWidthChange} value={currentRectangle.rectangleSize.width} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Высота</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleRectangleSizeHeightChange} value={currentRectangle.rectangleSize.height} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Фон</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleBackgroundChange} value={currentRectangle.background} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Ширина обводки</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleBorderWidthChange} value={currentRectangle.border.width} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Цвет обводки</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleBorderColorChange} value={currentRectangle.border.color} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Тип обводки</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleBorderTypeChange} value={currentRectangle.border.type} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Позиция X</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handlePositionXChange} value={currentRectangle.position.x} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Позиция Y</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handlePositionYChange} value={currentRectangle.position.y} />\r\n                    </div>\r\n                    <a href=\"#\" className=\"close\">Применить</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\updateTextContainer.tsx",["349"],"import { useDispatch } from \"react-redux\";\r\nimport Editor from \"../../../../model/Editor\";\r\nimport { addState } from \"../../../../store/Reducer/editor\";\r\nimport updateTextContainer from \"../../../../methods/updateContent/updateTextContainer\";\r\nimport TextContainer from \"../../../../model/slide/content/TextContainer\";\r\n\r\ntype updateTextContainerProps = {\r\n    presentEditor: Editor, currentTextContainer: TextContainer\r\n}\r\n\r\nexport const UpdateTextContainer = ({ presentEditor, currentTextContainer }: updateTextContainerProps) => {\r\n    const dispatch = useDispatch();\r\n    const updateStateUpdatingTextContainer = (textContainer: TextContainer) => dispatch(addState(updateTextContainer(presentEditor, textContainer)));\r\n\r\n    const handleWidthChange = (event: any) => updateStateUpdatingTextContainer({\r\n        ...currentTextContainer,\r\n        width: +event.target.value\r\n    });\r\n    const handlePositionXChange = (event: any) => updateStateUpdatingTextContainer({\r\n        ...currentTextContainer,\r\n        position: {\r\n            ...currentTextContainer.position,\r\n            x: +event.target.value\r\n        }\r\n    });\r\n    const handlePositionYChange = (event: any) => updateStateUpdatingTextContainer({\r\n        ...currentTextContainer,\r\n        position: {\r\n            ...currentTextContainer.position,\r\n            y: +event.target.value\r\n        }\r\n    });\r\n    const handleRichTextColorChange = (event: any) => updateStateUpdatingTextContainer({\r\n        ...currentTextContainer,\r\n        richText: {\r\n            ...currentTextContainer.richText,\r\n            color: event.target.value\r\n        }\r\n    });\r\n    const handleRichTextFontFamilyChange = (event: any) => updateStateUpdatingTextContainer({\r\n        ...currentTextContainer,\r\n        richText: {\r\n            ...currentTextContainer.richText,\r\n            fontFamily: event.target.value\r\n        }\r\n    });\r\n    const handleRichTextFontWeightChange = (event: any) => updateStateUpdatingTextContainer({\r\n        ...currentTextContainer,\r\n        richText: {\r\n            ...currentTextContainer.richText,\r\n            fontWeight: +event.target.value\r\n        }\r\n    });\r\n    const handleRichTextFontStyleChange = (event: any) => updateStateUpdatingTextContainer({\r\n        ...currentTextContainer,\r\n        richText: {\r\n            ...currentTextContainer.richText,\r\n            fontWeight: event.target.value\r\n        }\r\n    });\r\n    const handleRichTextFontSizeChange = (event: any) => updateStateUpdatingTextContainer({\r\n        ...currentTextContainer,\r\n        richText: {\r\n            ...currentTextContainer.richText,\r\n            fontSize: +event.target.value\r\n        }\r\n    });\r\n    const handleRichTextValueChange = (event: any) => updateStateUpdatingTextContainer({\r\n        ...currentTextContainer,\r\n        richText: {\r\n            ...currentTextContainer.richText,\r\n            value: event.target.value\r\n        }\r\n    });\r\n    return (\r\n        <div>\r\n            <div id=\"edit_params\">\r\n                <div id=\"popup_text\">\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Цвет</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleRichTextColorChange} value={currentTextContainer.richText.color} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Текст</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleRichTextValueChange} value={currentTextContainer.richText.value} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Ширина</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleWidthChange} value={currentTextContainer.width} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Шрифт</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleRichTextFontFamilyChange} value={currentTextContainer.richText.fontFamily} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Толщина</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleRichTextFontWeightChange} value={currentTextContainer.richText.fontWeight} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Стиль</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleRichTextFontStyleChange} value={currentTextContainer.richText.fontStyle} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Размер</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleRichTextFontSizeChange} value={currentTextContainer.richText.fontSize} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Позиция X</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handlePositionXChange} value={currentTextContainer.position.x} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Позиция Y</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handlePositionYChange} value={currentTextContainer.position.y} />\r\n                    </div>\r\n                    <a href=\"#\" className=\"close\">Применить</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\updateCircle.tsx",["350"],"import { useDispatch } from \"react-redux\";\r\nimport Editor from \"../../../../model/Editor\";\r\nimport { addState } from \"../../../../store/Reducer/editor\";\r\nimport updateCircle from \"../../../../methods/updateContent/updateCircle\";\r\nimport Circle from \"../../../../model/slide/content/shape/Circle\";\r\n\r\ntype updateCircleProps = {\r\n    presentEditor: Editor, currentCircle: Circle\r\n}\r\n\r\nexport const UpdateCircle = ({ presentEditor, currentCircle }: updateCircleProps) => {\r\n    const dispatch = useDispatch();\r\n    const updateStateUpdatingCircle = (circle: Circle) => dispatch(addState(updateCircle(presentEditor, circle)));\r\n\r\n    const handleRadiusChange = (event: any) => updateStateUpdatingCircle({\r\n        ...currentCircle,\r\n        radius: +event.target.value\r\n    });\r\n    const handleBorderWidthChange = (event: any) => updateStateUpdatingCircle({\r\n        ...currentCircle,\r\n        border: {\r\n            ...currentCircle.border,\r\n            width: +event.target.value\r\n        }\r\n    });\r\n    const handleBorderColorChange = (event: any) => updateStateUpdatingCircle({\r\n        ...currentCircle,\r\n        border: {\r\n            ...currentCircle.border,\r\n            color: event.target.value\r\n        }\r\n    });\r\n    const handleBorderTypeChange = (event: any) => updateStateUpdatingCircle({\r\n        ...currentCircle,\r\n        border: {\r\n            ...currentCircle.border,\r\n            type: event.target.value\r\n        }\r\n    });\r\n    const handleBackgroundChange = (event: any) => updateStateUpdatingCircle({\r\n        ...currentCircle,\r\n        background: event.target.value\r\n    });\r\n    const handlePositionXChange = (event: any) => updateStateUpdatingCircle({\r\n        ...currentCircle,\r\n        position: {\r\n            ...currentCircle.position,\r\n            x: +event.target.value\r\n        }\r\n    });\r\n    const handlePositionYChange = (event: any) => updateStateUpdatingCircle({\r\n        ...currentCircle,\r\n        position: {\r\n            ...currentCircle.position,\r\n            y: +event.target.value\r\n        }\r\n    });\r\n    return (\r\n        <div>\r\n            <div id=\"edit_params\">\r\n                <div id=\"popup_circle\">\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Радиус</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleRadiusChange} value={currentCircle.radius} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Ширина обводки</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleBorderWidthChange} value={currentCircle.border.width} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Цвет обводки</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleBorderColorChange} value={currentCircle.border.color} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Тип обводки</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleBorderTypeChange} value={currentCircle.border.type} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Фон</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handleBackgroundChange} value={currentCircle.background} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Позиция X</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handlePositionXChange} value={currentCircle.position.x} />\r\n                    </div>\r\n                    <div className=\"params_field\">\r\n                        <h3 className=\"param_name\">Позиция Y</h3>\r\n                        <input type=\"text\" className=\"param_input_label\" onChange={handlePositionYChange} value={currentCircle.position.y} />\r\n                    </div>\r\n                    <a href=\"#\" className=\"close\">Применить</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\createCircle.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\createRectangle.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\createImage.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\createTextContainer.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updatePresentationName.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\presentationName.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\slideBackground.tsx",["351"],"import { useDispatch, useSelector } from \"react-redux\";\r\nimport updateSlideBackground from \"../../../methods/updateContent/updateSlideBackground\";\r\nimport Editor from \"../../../model/Editor\";\r\nimport { RootState } from \"../../../store/Reducer\";\r\nimport { addState } from \"../../../store/Reducer/editor\";\r\n\r\nexport const SlideBackgroundEl = () => {\r\n    const dispatch = useDispatch();\r\n    const presentEditor: Editor = useSelector((state: RootState) => state.editorReducer.present);\r\n    const updateStateUpdatingSlideBackground = (color: string) => dispatch(addState(updateSlideBackground(presentEditor, color)));\r\n\r\n    const handleSlideBackgroundChange = (event: any) => updateStateUpdatingSlideBackground(\r\n        event.target.value\r\n    );\r\n\r\n    return (\r\n        <ul className=\"dropdown\">\r\n            <li>\r\n                <a href=\"#\">\r\n                    <input type=\"text\" className=\"param_input_label\" value={presentEditor.currentSlide?.background} onInput={handleSlideBackgroundChange} />\r\n                </a>\r\n            </li>\r\n        </ul>\r\n    );\r\n};","C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\deletingControl.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\menu\\control\\deleteElement.tsx",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\core\\deleteEditorContent.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\core\\deleteFromSlideList.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\methods\\updateContent\\updateSlideBackgroundImage.ts",[],"C:\\Users\\gleba\\source\\repos\\slidemaker-dev\\src\\components\\Editor\\control\\draggable\\draggable.tsx",[],{"ruleId":"352","replacedBy":"353"},{"ruleId":"354","replacedBy":"355"},{"ruleId":"356","severity":1,"message":"357","line":23,"column":33,"nodeType":"358","endLine":23,"endColumn":70},{"ruleId":"356","severity":1,"message":"357","line":24,"column":33,"nodeType":"358","endLine":24,"endColumn":91},{"ruleId":"356","severity":1,"message":"357","line":25,"column":33,"nodeType":"358","endLine":25,"endColumn":91},{"ruleId":"356","severity":1,"message":"357","line":26,"column":33,"nodeType":"358","endLine":26,"endColumn":70},{"ruleId":"359","severity":1,"message":"360","line":3,"column":64,"nodeType":"361","messageId":"362","endLine":3,"endColumn":65},{"ruleId":"359","severity":1,"message":"360","line":3,"column":70,"nodeType":"361","messageId":"362","endLine":3,"endColumn":71},{"ruleId":"363","severity":1,"message":"364","line":9,"column":14,"nodeType":"365","messageId":"366","endLine":9,"endColumn":19},{"ruleId":"356","severity":1,"message":"357","line":18,"column":25,"nodeType":"358","endLine":18,"endColumn":62},{"ruleId":"356","severity":1,"message":"357","line":19,"column":25,"nodeType":"358","endLine":19,"endColumn":100},{"ruleId":"356","severity":1,"message":"357","line":20,"column":25,"nodeType":"358","endLine":20,"endColumn":100},{"ruleId":"367","severity":1,"message":"368","line":15,"column":13,"nodeType":"358","endLine":15,"endColumn":47},{"ruleId":"356","severity":1,"message":"357","line":15,"column":13,"nodeType":"358","endLine":15,"endColumn":47},{"ruleId":"356","severity":1,"message":"357","line":30,"column":13,"nodeType":"358","endLine":30,"endColumn":69},{"ruleId":"369","severity":1,"message":"370","line":42,"column":22,"nodeType":"361","messageId":"371","endLine":42,"endColumn":24},{"ruleId":"356","severity":1,"message":"357","line":56,"column":17,"nodeType":"358","endLine":56,"endColumn":89},{"ruleId":"356","severity":1,"message":"357","line":58,"column":17,"nodeType":"358","endLine":58,"endColumn":90},{"ruleId":"356","severity":1,"message":"357","line":54,"column":17,"nodeType":"358","endLine":54,"endColumn":47},{"ruleId":"356","severity":1,"message":"357","line":67,"column":17,"nodeType":"358","endLine":67,"endColumn":69},{"ruleId":"369","severity":1,"message":"372","line":25,"column":20,"nodeType":"361","messageId":"371","endLine":25,"endColumn":22},{"ruleId":"369","severity":1,"message":"372","line":49,"column":22,"nodeType":"361","messageId":"371","endLine":49,"endColumn":24},{"ruleId":"369","severity":1,"message":"372","line":73,"column":25,"nodeType":"361","messageId":"371","endLine":73,"endColumn":27},{"ruleId":"356","severity":1,"message":"357","line":98,"column":17,"nodeType":"358","endLine":98,"endColumn":107},{"ruleId":"356","severity":1,"message":"357","line":99,"column":17,"nodeType":"358","endLine":99,"endColumn":113},{"ruleId":"356","severity":1,"message":"357","line":100,"column":17,"nodeType":"358","endLine":100,"endColumn":134},{"ruleId":"356","severity":1,"message":"357","line":11,"column":21,"nodeType":"358","endLine":11,"endColumn":33},{"ruleId":"356","severity":1,"message":"357","line":12,"column":21,"nodeType":"358","endLine":12,"endColumn":33},{"ruleId":"356","severity":1,"message":"357","line":13,"column":21,"nodeType":"358","endLine":13,"endColumn":33},{"ruleId":"356","severity":1,"message":"357","line":14,"column":21,"nodeType":"358","endLine":14,"endColumn":33},{"ruleId":"356","severity":1,"message":"357","line":72,"column":21,"nodeType":"358","endLine":72,"endColumn":51},{"ruleId":"356","severity":1,"message":"357","line":104,"column":21,"nodeType":"358","endLine":104,"endColumn":51},{"ruleId":"356","severity":1,"message":"357","line":115,"column":21,"nodeType":"358","endLine":115,"endColumn":51},{"ruleId":"356","severity":1,"message":"357","line":90,"column":21,"nodeType":"358","endLine":90,"endColumn":51},{"ruleId":"356","severity":1,"message":"357","line":38,"column":17,"nodeType":"358","endLine":38,"endColumn":57},"no-native-reassign",["373"],"no-negated-in-lhs",["374"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-mixed-operators","Unexpected mix of '&' and '|'.","BinaryExpression","unexpectedMixedOperator","@typescript-eslint/no-redeclare","'Image' is already defined.","Identifier","redeclared","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]